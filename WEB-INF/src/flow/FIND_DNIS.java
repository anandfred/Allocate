package flow;
import java.io.*;

import com.avaya.sce.runtimecommon.SCESession;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Dialog Designer at: 2007-SEP-04  10:44:34 AM
 */
public class FIND_DNIS extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Dialog Designer at: 2007-SEP-04  10:44:34 AM
	 */
	public FIND_DNIS() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	
public void requestBegin(SCESession MySession){
		
		// Variable Declarations...............
		
		String APPTEMP=MySession.getVariable(IProjectVariables.TEMP).getSimpleVariable().getStringValue();
		String ConfigPath = MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator+"Allocate"+File.separator+"applications.cfg";
		//String msgdayPath= MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator+APPTEMP+".msgday";
	//	String logPath=MySession.getAbsoluteProjectFilePath()+File.separator+"config"+File.separator+"log.cfg";
		String read_line=null;
		String data[]=null;
		
		
		
		try{
			BufferedReader configFile=new BufferedReader(new FileReader(ConfigPath));
		//	BufferedReader LogFile = new BufferedReader(new FileReader(logPath));
			
			
			
			
			
			while((read_line=configFile.readLine())!= null)
			{
				 data=read_line.split("\\,");
				 
				 if(APPTEMP.equalsIgnoreCase(data[2]))
	        	  {
					 MySession.getVariable(IProjectVariables.GRPNAME).getSimpleVariable().setValue(data[1]);
					 MySession.getVariable(IProjectVariables.APPNAME).getSimpleVariable().setValue(data[2]);
					 MySession.getVariable(IProjectVariables.EXTN).getSimpleVariable().setValue(data[3]);
					 MySession.getVariable(IProjectVariables.VDNMENU).getSimpleVariable().setValue(data[4]);
					 MySession.getVariable(IProjectVariables.LOGFILE).getSimpleVariable().setValue(data[5]);
					 MySession.getVariable(IProjectVariables.CALL_CENTER).getSimpleVariable().setValue(data[0]);
					 MySession.getVariable(IProjectVariables.DNIS).getSimpleVariable().setValue(data[0]);
					  break;
	        	  }
				 else
				 {
					 MySession.getVariable(IProjectVariables.APPNAME).getSimpleVariable().setValue("NOAPP");
				 }
			}
			configFile.close();
			APPTEMP=MySession.getVariable(IProjectVariables.APPNAME).getSimpleVariable().getStringValue();
			String msgdayPath= MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator+APPTEMP+".msgday";
			
			File workingHour=new File(msgdayPath);
			
			if(workingHour.exists())
			{
			BufferedReader msgDayFile=new BufferedReader(new FileReader(msgdayPath));
			
			while ((read_line = msgDayFile.readLine())!=null)
			{
				MySession.getVariable(IProjectVariables.MSGOFDAY).getSimpleVariable().setValue(read_line);
			}
			msgDayFile.close();
			
			}
		
		}
		catch(Exception e)
		{
			String exception_err = e.getMessage();
			e.printStackTrace();
		}
		
	}


	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Dialog Designer at: 2010-SEP-03  03:14:26 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("ANCE_PAS_WELCOME", "DEFAULT");
		return next;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Dialog Designer at: 2010-SEP-03  03:14:26 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		com.avaya.sce.runtime.Condition condition = null;
		java.util.Collection actions = null;

		// Create the list of actions to execute/evaluate
		actions = new java.util.ArrayList(4);
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "APPLICATION VDN", "APPVDN"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "CONFIGPATH"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "MSGDAYPATH"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "TEMP APPLN TYPE", "TEMP"));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
