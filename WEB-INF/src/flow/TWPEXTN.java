package flow;
import java.io.*;

import com.avaya.sce.runtimecommon.SCESession;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Dialog Designer at: 2008-JAN-20  07:41:23 PM
 */
public class TWPEXTN extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Dialog Designer at: 2008-JAN-20  07:41:23 PM
	 */
	public TWPEXTN() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	public void requestBegin(SCESession MySession){
		
		// Variable Declarations...............
		
		String Extension_800=MySession.getVariable(IProjectVariables.EXTENSION).getSimpleVariable().getStringValue();
		String applName="";
		String applnType="";
		String extConfigPath = MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator +"applications.cfg";
		String read_line=null;
		String data[]=null;
		String APPLNAME=null;
		
		String dummyStar=null;
		
		int StartTime,endTime,CurrentTime;
		
		BufferedReader configFile=null;
		BufferedReader xferoptionsfile=null;
		
		try{
			

			
			int asterisk = Extension_800.indexOf("*");
			
			if (asterisk >= 0 )
			{
				MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("STAR");
				dummyStar="STAR";
				//dummyStar="STAR";
				
			}
			else
			{
				int agnt_extn =0;
				
				agnt_extn = Integer.parseInt(Extension_800);
				
				if(agnt_extn == 0)
				{				
					MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("NO");
					dummyStar="NO";
				}
					
				
				if ( agnt_extn > 20000 && agnt_extn < 49999 )
				{
					MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("YES");
					dummyStar="YES";
					MySession.getVariable(IProjectVariables.EXTENSION).getSimpleVariable().setValue(Extension_800);
				}
				else
				{
					MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("NO");
					dummyStar="NO";
				}
			}	
			
	if (!(dummyStar.equalsIgnoreCase("STAR")) || (dummyStar.equalsIgnoreCase("YES")))
			{
			configFile=new BufferedReader(new FileReader(extConfigPath));
		//	BufferedReader LogFile = new BufferedReader(new FileReader(logPath));
			
			
			while((read_line=configFile.readLine())!= null)
			{
				 data=read_line.split("\\,");
				 
				 if(Extension_800.equalsIgnoreCase(data[0]))
	        	  {
					 applnType=data[7];
					 applName=data[2];
		/*			 System.out.println("applName,Type="+applnType);
					 System.out.println("applName,Type="+applName);*/

					 
					 dummyStar="ENTRY";
					 
					 break;
	        	  }
				 else
					 dummyStar="NENTRY";
			}
			configFile.close();
			
		//	System.out.println("dummyStar="+dummyStar);
			
			if ( dummyStar.equalsIgnoreCase("NENTRY"))
			{
				MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("OPEN");
				MySession.getVariable(IProjectVariables.TEMP).getSimpleVariable().setValue(applName);
			}
			else if ( applnType.equalsIgnoreCase("AGENT"))
			{
				
				/* Code to check the working Hours File 
				   application name = appname + ".workhours" */
				
				String appworkHoursPath=MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator+applName+".workhours";
				
				String appContents=null;
				String appData[]=null;
				String ConfigDay=null;
				
				
				File workingHour=new File(appworkHoursPath);
				if(workingHour.exists())
				{
					xferoptionsfile=new BufferedReader(new FileReader(appworkHoursPath));
				
				
				
				
				
				while ((appContents=xferoptionsfile.readLine())!=null)
				{
					appData=appContents.split("\\,");
					
					if ( Integer.parseInt(appData[0])== 0)
						ConfigDay="Monday";
					else if ( Integer.parseInt(appData[0])== 1)
						ConfigDay="Tuesday";
					else if ( Integer.parseInt(appData[0])== 2)
						ConfigDay="Wednesday";
					else if ( Integer.parseInt(appData[0])== 3)
						ConfigDay="Thursday";
					else if ( Integer.parseInt(appData[0])== 4)
						ConfigDay="Friday";
					else if ( Integer.parseInt(appData[0])== 5)
						ConfigDay="Saturday";
					else 
						ConfigDay="Sunday";
				//	System.out.println("ConfigDay="+ConfigDay);
					
					if (MySession.getVariable(IProjectVariables.DATE).getComplexVariable().getField("dayofweek").getStringValue().equalsIgnoreCase(ConfigDay))
					{
						StartTime=Integer.parseInt(appData[1]);
						endTime=Integer.parseInt(appData[2]);
						String Hour=MySession.getVariable(IProjectVariables.TIME).getComplexVariable().getField("hour").getStringValue();
						String Minute=MySession.getVariable(IProjectVariables.TIME).getComplexVariable().getField("minute").getStringValue();
						String CrntTime=Hour+Minute;
						CurrentTime=Integer.parseInt(CrntTime);
						
				/*		System.out.println("CrntTime="+CrntTime);
						System.out.println("CurrentTime="+CurrentTime);
						System.out.println("StartTime="+StartTime);
						System.out.println("endTime="+endTime);*/
						
						
						if ( (CurrentTime >= StartTime) && (CurrentTime <= endTime))
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("OPEN");
							dummyStar="OPEN";
						}
						else
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("CLOSED");
							dummyStar="CLOSED";
						}
						break;
					}
				}
				xferoptionsfile.close();
				}
				
				/* Code to check the Holiday Hours File 
				   application name = appname + ".holiday" */
				
				String appworkholidaypath=MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator+applName+".holiday";
				
				File holidayHours=new File(appworkholidaypath);
				
				if (holidayHours.exists())
				{
					xferoptionsfile=new BufferedReader(new FileReader(appworkholidaypath));
				
				 appContents="";
				appData=null;
				
				while ((appContents=xferoptionsfile.readLine())!=null)
				{
					
					
					appData=appContents.split("\\,");
					
					
					if (MySession.getVariable(IProjectVariables.DATE).getComplexVariable().getField("audio").getStringValue().equalsIgnoreCase(appData[1]))
					{
						if(appData[2].equalsIgnoreCase("CLOSED"))
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("CLOSED");
							dummyStar="CLOSED";
							break;
						}
						else
						{
						StartTime=Integer.parseInt(appData[2]);
						endTime=Integer.parseInt(appData[3]);
						String Hour=MySession.getVariable(IProjectVariables.TIME).getComplexVariable().getField("hour").getStringValue();
						String Minute=MySession.getVariable(IProjectVariables.TIME).getComplexVariable().getField("minute").getStringValue();
						String CrntTime=Hour+Minute;
						CurrentTime=Integer.parseInt(CrntTime);
						
						if ( (CurrentTime >= StartTime) && (CurrentTime <= endTime))
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("OPEN");
							dummyStar="OPEN";
						}
						else
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("CLOSED");
							dummyStar="CLOSED";
						}
						break;
						}
					}
				}
				xferoptionsfile.close();
				}
				
				/* Code to check the meeting Hours File 
				   application name = appname + ".staffmtng" */
				
				String appStaffMeetingpath=MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+File.separator+applName+".staffmtng";
				
				File staffmeeting=new File(appStaffMeetingpath);
				if (staffmeeting.exists())
				{
				xferoptionsfile=new BufferedReader(new FileReader(appStaffMeetingpath));
								
				 appContents="";
				appData=null;
				
				while ((appContents=xferoptionsfile.readLine())!=null)
				{
					appData=appContents.split("\\,");
					if (MySession.getVariable(IProjectVariables.DATE).getComplexVariable().getField("audio").getStringValue().equalsIgnoreCase(appData[0]))
					{
						StartTime=Integer.parseInt(appData[1]);
						endTime=Integer.parseInt(appData[2]);
						String Hour=MySession.getVariable(IProjectVariables.TIME).getComplexVariable().getField("hour").getStringValue();
						String Minute=MySession.getVariable(IProjectVariables.TIME).getComplexVariable().getField("minute").getStringValue();
						String CrntTime=Hour+Minute;
						CurrentTime=Integer.parseInt(CrntTime);
						
						if(dummyStar.equalsIgnoreCase("OPEN"))
						{
						if ( (CurrentTime >= StartTime) && (CurrentTime <= endTime))
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("MEETING");
							MySession.getVariable(IProjectVariables.MEETING_TIME).getSimpleVariable().setValue(appData[2]);
						}
						else
						{
							MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("OPEN");
						}
						}
						break;
						}
				}
				xferoptionsfile.close();
				}
				
				
			}
			else if(applnType.equalsIgnoreCase("IVR"))
			{
				MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("IVR");
				MySession.getVariable(IProjectVariables.TEMP).getSimpleVariable().setValue(applName);
				//LogFileWriter.write("Number belongs to IVR");
	            //LogFileWriter.write("\n");
			}
			else
			{
				MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("UNKNOWN");
				MySession.getVariable(IProjectVariables.TEMP).getSimpleVariable().setValue(applName);
			}
				
		  }
	else
	{
		MySession.getVariable(IProjectVariables.XFERFLAG).getSimpleVariable().setValue("UNKNOWN");
		MySession.getVariable(IProjectVariables.TEMP).getSimpleVariable().setValue(applName);
		//LogFileWriter.write("Number belongs to IVR");
        //LogFileWriter.write("\n");
	}
		}
		catch(Exception e)
		{
			String exception_err = e.getMessage();
			if(configFile!=null) {try {
				configFile.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
					}
			}
			if(xferoptionsfile!=null){try {
				xferoptionsfile.close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
		   }
			e.printStackTrace();
		}
			
			
		//	e.printStackTrace();
		}
		
	}


	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Dialog Designer at: 2010-SEP-03  03:14:26 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Dialog Designer at: 2010-SEP-03  03:14:26 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		com.avaya.sce.runtime.Condition condition = null;
		java.util.Collection actions = null;

		// Create the list of actions to execute/evaluate
		actions = new java.util.ArrayList(2);
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "XFERFLAG"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "CONFIGPATH"));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// test the if condition
		condition = new com.avaya.sce.runtime.Condition("condition1", "XFERFLAG", com.avaya.sce.runtime.Condition.STRING_EQUAL_IGNORE, "OPEN", false);
		if(condition.evaluate(mySession)) {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TWP_XFER", "OPEN"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// test the if condition
		condition = new com.avaya.sce.runtime.Condition("condition2", "XFERFLAG", com.avaya.sce.runtime.Condition.STRING_EQUAL_IGNORE, "CLOSED", false);
		if(condition.evaluate(mySession)) {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ANCE_CLOSED", "CLOSED"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// test the if condition
		condition = new com.avaya.sce.runtime.Condition("condition3", "XFERFLAG", com.avaya.sce.runtime.Condition.STRING_EQUAL_IGNORE, "MEETING", false);
		if(condition.evaluate(mySession)) {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("ANCE_MEETING", "MEETING"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// test the if condition
		condition = new com.avaya.sce.runtime.Condition("condition4", "XFERFLAG", com.avaya.sce.runtime.Condition.STRING_EQUAL_IGNORE, "IVR", false);
		if(condition.evaluate(mySession)) {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("FIND_IVR", "AVAYAIVR"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// test the if condition
		condition = new com.avaya.sce.runtime.Condition("condition5", "XFERFLAG", com.avaya.sce.runtime.Condition.STRING_EQUAL_IGNORE, "STAR", false);
		if(condition.evaluate(mySession)) {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("BOARD", "46000"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		} else {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("TWP_XFER", "UNKNOWN"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
