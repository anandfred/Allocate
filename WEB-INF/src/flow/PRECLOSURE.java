package flow;

import java.io.*;

import com.avaya.sce.runtimecommon.ITraceInfo;
import com.avaya.sce.runtimecommon.SCESession;


/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Dialog Designer at: 2008-JAN-10  02:18:27 PM
 */
public class PRECLOSURE extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Dialog Designer at: 2008-JAN-10  02:18:27 PM
	 */
	public PRECLOSURE() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	// READ CONFIG FILES FOR PRE CLOSURE
	
	public void requestBegin(SCESession MySession){
		
		// Variable Declarations...............
		ITraceInfo trace=MySession.getTraceOutput();
		String APPNAME=MySession.getVariable(IProjectVariables.APPNAME).getSimpleVariable().getStringValue();
		String preClosurePath = MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+"Allocate"+File.separator+APPNAME+".preclosure";
		String preClosureHolidayPath = MySession.getVariable(IProjectVariables.CONFIGPATH).getSimpleVariable().getStringValue()+"Allocate"+File.separator+APPNAME+".holiday";
		

		//String msgoftheDayPath = MySession.getAbsoluteProjectFilePath()+File.separator+"config"+File.separator+"mday.cfg";
	//	String logPath=MySession.getAbsoluteProjectFilePath()+File.separator+"config"+File.separator+"log.cfg";
		String read_line=null;
		String data[]=null;
		
		String holiday_line = null;
		String Holiday[]=null;
		
		String holidayDate = null;
		
		// PRE CLOSURE ANNOUNCEMNT VARIABLES
		
		long  today, startDay,endDay,holidayCtr=0;
		
		String dummyData=null;
		BufferedReader preClosureHolidayFile=null;
		BufferedReader preClosureFile=null;
		
		
		
		
		try{
			 preClosureFile=new BufferedReader(new FileReader(preClosurePath));
			
			 trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, " Preclosure Path  "+preClosurePath);
		//	BufferedReader LogFile = new BufferedReader(new FileReader(logPath));
			
			read_line=preClosureFile.readLine();
			
			trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, " Preclosure Path Read Line "+read_line);
			//System.out.println("DATA = "+read_line);
			data=read_line.split("\\,");
			
			
			preClosureFile.close();
			
	/*		MySession.getVariable(IProjectVariables.HOLIDAY).getComplexVariable().getField("HOLIDATE").setValue(data[0]);
			MySession.getVariable(IProjectVariables.HOLIDAY).getComplexVariable().getField("STARTTIME").setValue(data[1]);
			MySession.getVariable(IProjectVariables.HOLIDAY).getComplexVariable().getField("ENDTIME").setValue(data[2]);*/
			
			
			if ( (data[0].equalsIgnoreCase("NOANCMNT")) || (read_line == null))
			{
				 MySession.getVariable(IProjectVariables.PRECLOS ).getSimpleVariable().setValue("NO");
				 trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, " Preclosure Announcment-> NO");
			}
			else
			{
				
				
				holidayDate=data[2];
				
				today=Long.parseLong(MySession.getVariable(IProjectVariables.DATE).getComplexVariable().getField("audio").getStringValue());
				
				startDay = Long.parseLong(data[0]);
				endDay= Long.parseLong(data[1]);
				
				
				
				dummyData = today + ":" + startDay + ":" + endDay;
				
				trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, " Dummy String NO"+dummyData);
				if (( today >= startDay) && (today <= endDay))
				{
					MySession.getVariable(IProjectVariables.PRECLOS ).getSimpleVariable().setValue("YES");
					MySession.getVariable(IProjectVariables.HOLI_DAY).getSimpleVariable().setValue(data[3]);
					
					 preClosureHolidayFile=new BufferedReader(new FileReader(preClosureHolidayPath));
					 trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, "Holiday File ->"+preClosureHolidayFile);
					while((holiday_line=preClosureHolidayFile.readLine())!= null)
					{
						holidayCtr= holidayCtr+1;
						Holiday=holiday_line.split("\\,");
					
						if (Holiday[0].equalsIgnoreCase(holidayDate))
						{
							trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, "Holiday File contents->"+holiday_line);
							if (holidayCtr == 1)
							{
								MySession.getVariable(IProjectVariables.HOLIDAY).getComplexVariable().getField("HOLIDATE").setValue(Holiday[1]);
								MySession.getVariable(IProjectVariables.HOLIDAY).getComplexVariable().getField("STARTTIME").setValue(Holiday[2]);
								MySession.getVariable(IProjectVariables.HOLIDAY).getComplexVariable().getField("ENDTIME").setValue(Holiday[3]);
							}
							else if(holidayCtr == 2)
							{
								MySession.getVariable(IProjectVariables.WORKDAY_1).getComplexVariable().getField("WORKDAY").setValue(Holiday[1]);
								MySession.getVariable(IProjectVariables.WORKDAY_1).getComplexVariable().getField("STARTTIME").setValue(Holiday[2]);
								MySession.getVariable(IProjectVariables.WORKDAY_1).getComplexVariable().getField("ENDTIME").setValue(Holiday[3]);
							}
							else if(holidayCtr == 3)
							{
								MySession.getVariable(IProjectVariables.WORKDAY_2).getComplexVariable().getField("WORKDAY").setValue(Holiday[1]);
								MySession.getVariable(IProjectVariables.WORKDAY_2).getComplexVariable().getField("STARTTIME").setValue(Holiday[2]);
								MySession.getVariable(IProjectVariables.WORKDAY_2).getComplexVariable().getField("ENDTIME").setValue(Holiday[3]);
							}
							else if(holidayCtr == 4)
							{
								MySession.getVariable(IProjectVariables.WORKDAY_3).getComplexVariable().getField("WORKDAY").setValue(Holiday[1]);
								MySession.getVariable(IProjectVariables.WORKDAY_3).getComplexVariable().getField("STARTTIME").setValue(Holiday[2]);
								MySession.getVariable(IProjectVariables.WORKDAY_3).getComplexVariable().getField("ENDTIME").setValue(Holiday[3]);
							}
						} // IF LOOP ENDS
					} // WHILE LOOP ENDS HERE
					holidayCtr=holidayCtr -1 ;
					trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, "Holiday Counter->"+holidayCtr);
					MySession.getVariable(IProjectVariables.NO_OF_PRE_CLOSE).getSimpleVariable().setValue(holidayCtr);
					 preClosureHolidayFile.close();
					 dummyData = "HOLIDAY CTR = " + holidayCtr;
				} // IF LOOP ENDS ( today >= startDay) && (today <= endDay)
				else
				{
					MySession.getVariable(IProjectVariables.PRECLOS ).getSimpleVariable().setValue("NO");
					trace.writeln(ITraceInfo.TRACE_LEVEL_FATAL, "Pre Closure Announcement->NO");
				}
			} // ELSE LOOP FOR NOANCMNT
		} // TRY LOOP ENDS HERE 
		
			
		catch(Exception e)
		{
			MySession.getVariable(IProjectVariables.PRECLORESPONSE).getSimpleVariable().setValue("failure");
			
			String exception_err = e.getMessage();
			e.printStackTrace();
			
			if(preClosureFile!=null){
				try {
					preClosureFile.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			if(preClosureHolidayFile!=null){
				try {
					preClosureHolidayFile.close();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
			
		}
}
		


	

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Dialog Designer at: 2010-SEP-03  03:14:25 PM
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Dialog Designer at: 2010-SEP-03  03:14:25 PM
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		com.avaya.sce.runtime.Condition condition = null;
		java.util.Collection actions = null;

		// Create the list of actions to execute/evaluate
		actions = new java.util.ArrayList(16);
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "PRECLOS"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "PRECLORESPONSE"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "HOLIDAY:HOLIDATE"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "HOLIDAY:ENDTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "HOLIDAY:ENDTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY1:WORKDAY"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY1:STARTTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY1:ENDTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY2:WORKDAY"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY2:STARTTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY2:ENDTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY3:WORKDAY"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY3:STARTTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "WORKDAY3:ENDTIME"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "NO_OF_PRE_CLOSE"));
		actions.add(new com.avaya.sce.runtime.tracking.ReportInfo(com.avaya.sce.runtimecommon.IReportInfo.REPORT_TYPE_PROGRESS, com.avaya.sce.runtimecommon.IReportInfo.ALARM_LEVEL_INFO, "", "", "HOLI_DAY"));
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// test the if condition
		condition = new com.avaya.sce.runtime.Condition("condition1", "PRECLOS", com.avaya.sce.runtime.Condition.STRING_EQUAL_IGNORE, "YES", false);
		if(condition.evaluate(mySession)) {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("PLAY_PRE_CLOSE", "PLAY_PRE"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		} else {

			// Create the list of actions to execute/evaluate
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("MENU", "NO_PRE"));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
